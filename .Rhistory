View(temp1)
View(temp2)
for c(temp1,temp2){boxplot($temperature)}
# Working on a loop to graph both files.
Temp = c(temp1, temp2)
for (Temp){boxplot($temperature)}
temp = merge.data.frame(temp1, temp2)
View(temp)
temp = merge(temp1, temp2)
View(temp)
temp = merge(temp1, temp2, by = "time")
View(temp)
temp = join(temp1, temp2)
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
temp = join(temp1, temp2)
temp = join(temp1, temp2, by="time")
temp = join(temp1, temp2, by="temperature")
temp = join(temp1, temp2)
temp = join(temp1, temp2, type='inner')
temp = join(temp1, temp2, type='outer')
temp = join(temp1, temp2, type='full')
temp = join(temp1, temp2, type='right')
temp = join(temp1, temp2, type='left')
temp = join(temp1$temperature, temp2$temperature, by = 'temp1$time)
))
temp = join(temp1$temperature, temp2$temperature, by = "time")
1+1
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
temp = join(temp1$temperature, temp2$temperature, by = "time")
temp = join(temp1, temp2, by = "time")
temp = merge.data.frame(all.x = )
temp = merge.data.frame(temp1, temp2)
names(temp1)= c("time1", "temperature1")
temp = merge.data.frame(temp1, temp2)
temp = join(temp1, temp2)
temp = merge(temp1, temp2)
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time1", "temperature1")
class(temp1$temperature1)
class(temp1$time1)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time1 = ymd_hms(temp1$time1)
class(temp1$temperature1)
class(temp1$time1)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
temp = merge(temp1, temp2)
temp = join(temp1, temp2)
temp = merge.default(temp1, temp2)
temp = join(temp1, temp2)
temp = merge(temp1, temp2)
temp = cbind(temp1, temperature2=temp2$temperature2)
boxplot(temp$temperature1)
boxplot(temp1$temperature1)
boxplot(temp$temperature2)
boxplot(temp2$temperature2)
ggplot(temp)+
geom_boxplot(temperature1)
ggplot()+
geom_boxplot(temp,temperature1)
ggplot(temp)+
geom_boxplot(temperature1)
ggplot(temp)+
geom_boxplot(data=NULL, temperature1)
ggplot(temp)+
geom_boxplot(data=temp, temperature1)
ggplot(temp, aes(x=time1, y = temperature1))+
geom_boxplot()
ggplot(temp, aes(y = temperature1))+
geom_boxplot()
ggplot(temp)+
geom_boxplot()
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
class(temp1$temperature1)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time1 = ymd_hms(temp1$time)
class(temp1$temperature1)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp = cbind(temp1, temperature2=temp2$temperature2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp1 = cbind(temp1, temperature2=temp2$temperature2)
temp = temp1[-c(3)]
View(temp1)
ggplot(temp, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-1,3)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
class(temp1$temperature1)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time1 = ymd_hms(temp1$time)
class(temp1$temperature1)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp1 = cbind(temp1, temperature2=temp2$temperature2)
temp = temp1[-c(3)]
ggplot(temp, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-1,3)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
class(temp$time)
class(temp$temperature1)
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
class(temp1$temperature1)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time1 = ymd_hms(temp1$time)
class(temp1$temperature1)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = temp3[-c(3)]
View(temp1)
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
#Import the raw csv file from the temperature loggers
#If you have two water temperatures, name them watertemp1 and watertemp2
temp1raw = read.csv("LJ_20180528_L1_1_w.csv", header = FALSE, sep =",")
temp2raw = read.csv("LJ_20180528_L2_1_w.csv", header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
class(temp1$temperature1)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time1 = ymd_hms(temp1$time)
class(temp1$temperature1)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = temp3[-c(3)]
View(temp1)
View(temp2)
View(temp3)
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
class(temp1$temperature1)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
class(temp1$temperature1)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = temp3[-c(3)]
boxplot(temp$temperature1)
ggplot(temp, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-1,3)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
#One thing that I need to do is learn to make loops. This way I am not repeating the same code for two different plots.
boxplot(temp$temperature2)
#One thing that I need to do is learn to make loops. This way I am not repeating the same code for two different plots.
boxplot(temp$temperature2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = temp3[-c(3)]
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
boxplot(temp3$temperature1)
ggplot(temp3, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-1,3)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
#One thing that I need to do is learn to make loops. This way I am not repeating the same code for two different plots.
boxplot(temp3$temperature2)
ggplot(temp3, aes(x=time, y=temperature2))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-2,1)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp3, aes(x=time))+
#the following line x=time assigns x and y axis labels
geom_line(aes(y=temperature1))+
geom_line(aes(y=temperature2))+
coord_cartesian(ylim =c(-2,1)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp3, aes(x=time))+
#the following line x=time assigns x and y axis labels
geom_line(aes(y=temperature1))+
geom_line(aes(y=temperature2))+
coord_cartesian(ylim =c(-2,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp3, aes(x=time))+
#the following line x=time assigns x and y axis labels
geom_line(aes(y=temperature1))+
geom_line(aes(y=temperature2))+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp3, aes(x=time))+
#the following line x=time assigns x and y axis labels
geom_line(aes(y=temperature1))+
geom_line(aes(y=temperature2))+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Date-Time")+
ylab ("Temperature(C)")
ggplot(temp3, aes(x=time, colour = variable))+
#the following line x=time assigns x and y axis labels
geom_line(aes(y=temperature1))+
geom_line(aes(y=temperature2))+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Date-Time")+
ylab ("Temperature(C)")
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
View(temp)
boxplot(temp$temperature1)
boxplot(temp$variable)
boxplot(temp$variable,temperature1)
boxplot(temp$value)
geom_boxplot(x=variable, y = value, colour=variable)
geom_boxplot()
geom_boxplot(colour = variable)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
boxplot(temp$value)
class(temp1$)
class(temp$variable)
class(temp$value)
boxplot(temp$variable)
geom_boxplot(colour = variable)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2", value.name ="temperature", variable.name = "logger"))
boxplot(temp$value)
ggplot(temp, aes(x=time, y=value, colour = variable))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-1,3)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
#Both on the same line
ggplot(temp, aes(x=time, y=value, colour = variable))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2")
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
geom_boxplot(colour = variable)
names(temp)= c("time", "logger", "temperature")
geom_boxplot(colour = logger)
ggplot(data = temp, x = logger, y = temperature, group = logger)+
geom_boxplot(colour = logger)
ggplot(data = temp, aes(x=logger, y=temperature))+
geom_boxplot()
ggplot(data = temp, aes(x=logger, y=temperature))+
geom_boxplot(notch = TRUE, color=logger)
ggplot(data = temp, aes(x=logger, y=temperature))+
geom_boxplot(notch = TRUE)
ggplot(data = temp, aes(x=logger, y=temperature, colour = logger))+
geom_boxplot(notch = TRUE)
ggplot(data = temp, aes(x=logger, y=temperature))+
geom_boxplot(notch = TRUE)+
theme_bw()
xlab ("")+
ylab ("Temperature (C)")
ggplot(data = temp, aes(x=logger, y=temperature))+
geom_boxplot(notch = TRUE)+
theme_bw()+
xlab ("")+
ylab ("Temperature (C)")
#One thing that I need to do is learn to make loops. This way I am not repeating the same code for two different plots.
boxplot(temp3$temperature2)
ggplot(temp3, aes(x=time, y=temperature2))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-2,1)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp, aes(x=time, y=value, colour = variable))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
ggplot(temp3, aes(x=time, y=temperature2))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-2,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp3, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-1,3)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
ggplot(temp3, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=value, colour = variable))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=logger, colour = logger))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
ggplot(data = temp, aes(x=logger, y=temperature))+
geom_boxplot(notch = TRUE)+
theme_bw()+
xlab ("")+
ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
ggplot(temp3, aes(x=time, y=temperature2))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-2,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
#One thing that I need to do is learn to make loops. This way I am not repeating the same code for two different plots.
boxplot(temp3$temperature2)
ggplot(temp3, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-3,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
boxplot(temp3$temperature1)
