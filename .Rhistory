coord_cartesian(ylim =c(0,3))
watertempplot = ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
panel.border = element_rect(colour = "black", fill = NA,size = 0.2)
View(watertempplot)
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))+
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(1.5,3))+
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(2,3))+
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(1.5,2.5))+
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
require(ggplot2)
require(dplyr)
require(lubridate)
require(dplyr)
require(citr)
require(reshape2)
require(scales)
dir()
#Import the raw csv file from the temperature loggers
#If you have two water temperatures, name them watertemp1 and watertemp2
watertemp = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
airtemp = read.csv("LJ_20180524_L1_1.csv", header = FALSE, sep =",")
#Import the raw csv file from the temperature loggers
#If you have two water temperatures, name them watertemp1 and watertemp2
watertempraw = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
airtempraw = read.csv("LJ_20180524_L1_1.csv", header = FALSE, sep =",")
View(airtempraw)
##Removing all the useless raw output from the logger
watertemp = watertempraw [-(1:200), -c(1,4, 5, 6)]
names(watertemp)= c("time", "temperature")
class(watertemp$temperature)
class(watertemp$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp$temperature = as.numeric(as.character(watertemp$temperature))
##This uses lubridate to convert the dates into a useable format.
watertemp$time = ymd_hms(watertemp1time)
class(watertemp$temperature)
class(watertemp$time)
##Removing all the useless raw output from the logger
watertemp = watertempraw [-(1:200), -c(1,4, 5, 6)]
names(watertemp)= c("time", "temperature")
class(watertemp$temperature)
class(watertemp$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp$temperature = as.numeric(as.character(watertemp$temperature))
##This uses lubridate to convert the dates into a useable format.
watertemp$time = ymd_hms(watertemp$time)
class(watertemp$temperature)
class(watertemp$time)
##Removing all the useless raw output from the logger
watertemp = watertempraw [-(1:200), -c(1,4, 5, 6)]
names(watertemp)= c("time", "temperature")
class(watertemp$temperature)
class(watertemp$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp$temperature = as.numeric(as.character(watertemp$temperature))
##This uses lubridate to convert the dates into a useable format.
watertemp$time = ymd_hms(watertemp$time)
class(watertemp$temperature)
class(watertemp$time)
airtemp = airtempraw [-(1:200), -c(1,4, 5, 6)]
names(airtemp)= c("time", "temperature")
airtemp$temperature = as.numeric(as.character(airtemp$temperature))
airtemp$time = ymd_hms(airtemp$time)
View(airtemp)
View(airtempraw)
View(airtemp)
View(watertemp)
#Import the raw csv file from the temperature loggers
#If you have two water temperatures, name them watertemp1 and watertemp2
temp1raw = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
temp2raw = read.csv("LJ_20180524_L1_1.csv", header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature")
class(temp1$temperature)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature = as.numeric(as.character(temp1$temperature))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
class(temp1$temperature)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time", "temperature")
temp2$temperature = as.numeric(as.character(temp2$temperature))
temp2$time = ymd_hms(temp2$time)
#Import the raw csv file from the temperature loggers
#If you have two water temperatures, name them watertemp1 and watertemp2
temp1raw = read.csv("LJ_20180524_L1_1_w.csv", header = FALSE, sep =",")
temp2raw = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature")
class(temp1$temperature)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature = as.numeric(as.character(temp1$temperature))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
class(temp1$temperature)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time", "temperature")
temp2$temperature = as.numeric(as.character(temp2$temperature))
temp2$time = ymd_hms(temp2$time)
View(temp1)
#Import the raw csv file from the temperature loggers
#If you have two water temperatures, name them watertemp1 and watertemp2
temp1raw = read.csv("LJ_20180524_L1_1.csv", header = FALSE, sep =",")
temp2raw = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature")
class(temp1$temperature)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature = as.numeric(as.character(temp1$temperature))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
class(temp1$temperature)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time", "temperature")
temp2$temperature = as.numeric(as.character(temp2$temperature))
temp2$time = ymd_hms(temp2$time)
View(temp1)
View(temp2)
View(temp1raw)
View(temp1raw)
View(temp2raw)
class(temp2$time)
class(temp2$temperature)
boxplot(temp1$temperature)
boxplot(temp2$temperature)
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,5)) +
scale_x_datetime(date_breaks = "3 hour",  labels = date_format("%Y/%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "3 hour",  labels = date_format("%Y/%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "3 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Temperaturess")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature (~degree~C")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature (A~degree~C)")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature ("A~degree~"C)")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature (~degree~C)")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature (ᵒC)")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature    (ᵒC)")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,4)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature (ᵒC)")
boxplot(temp1$temperature)
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature (ᵒC)")
#another way to play there "theme". Basically you control the way the gram looks
theme (panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature (ᵒC)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time (M/D/-H:M)")+
ylab ("Temperature (ᵒC)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (ᵒC)")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (ᵒC)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (&degC)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (*&deg*C)")
ylab ("Temperature" (C)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
#One thing that I need to do is learn to make loops. This way I am not repeating the same code for two different plots.
boxplot(temp2$temperature)
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
require(ggplot2)
require(dplyr)
require(lubridate)
require(dplyr)
require(citr)
require(reshape2)
require(scales)
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(2,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
require(ggplot2)
require(dplyr)
require(lubridate)
require(dplyr)
require(citr)
require(reshape2)
require(scales)
#Import the raw csv file from the temperature loggers
#If you have two water temperatures, name them watertemp1 and watertemp2
temp1raw = read.csv("LJ_20180524_L1_1.csv", header = FALSE, sep =",")
temp2raw = read.csv("LJ_20180528_L2_2_w.csv", header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature")
class(temp1$temperature)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature = as.numeric(as.character(temp1$temperature))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
class(temp1$temperature)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time", "temperature")
temp2$temperature = as.numeric(as.character(temp2$temperature))
temp2$time = ymd_hms(temp2$time)
#One thing that I need to do is learn to make loops. This way I am not repeating the same code for two different plots.
boxplot(temp2$temperature)
ggplot(temp2, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature(C)")
View(temp2)
View(temp2raw)
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-2,1)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
ggplot(temp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(-1,3)) +
scale_x_datetime(date_breaks = "4 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)")
