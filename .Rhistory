View(kinfile)
plot(kinfile)
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
#Import the raw csv file from the temperature loggers
#If you have two water temperatures, name them watertemp1 and watertemp2
logger1 <- ("LJ_20180529_L1_1.csv")
temp1raw = read.csv(logger1, header = FALSE, sep =",")
temp1raw = read.csv("logger1", header = FALSE, sep =",")
class(logger1)
loggertest <- lapply(logger1)
loggertest <- lapply(logger1, read.csv)
getwd()
dir()
loggertest <- lapply(logger1, read.csv, header = FALSE, sep = ",")
View(loggertest)
loggertest <- (logger1, read.csv, header = FALSE, sep = ",")
loggertest <- read.csv(logger1, header = FALSE, sep = ",")
View(loggertest)
View(temp3)
loggertest2 <- read.csv(logger2,header = FALSE, sep = "," )
loggertest2 <- read.csv(logger2, header = FALSE, sep = "," )
logger2 <- ("LJ_LJ_20180529_L2_1_w.csv")
loggertest2 <- read.csv(logger2, header = FALSE, sep = "," )
logger2 <- ("LJ_20180529_L2_1_w.csv")
loggertest2 <- read.csv(logger2, header = FALSE, sep = "," )
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20180529_L1_1.csv")
logger2 <- ("LJ_20180529_L2_1_w.csv")
#Import the raw csv file from the temperature loggers
temp1raw = read.csv(logger1,  header = FALSE, sep =",")
temp2raw = read.csv(logger2, header = FALSE, sep =",")
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
gerl(logger1, "w")
grepl(logger1, "w")
grepl(logger2, "w")
grepl(logger2, w)
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20180529_L1_1.csv")
logger2 <- ("LJ_20180529_L2_1_w.csv")
grepl(logger2, w)
grepl(logger2, "w")
grepl(logger2, *_w)
grepl("w", logger2)
grepl("w", logger1)
if (grepl("w", logger1)) {
"Air Temperature"
}
if (grepl("w", logger2)) {
"Air Temperature"
}
"Water Temperature"} else {
"Air Temperature" }
print("Air Temperature") }
grepl("w", logger1)
grepl("w", logger2)
print("Air Temperature") }
if (grepl("w", logger1)= TRUE) {
print ("Water Temperature")
} else {
print("Air Temperature")
}
title = grepl("w", logger1)
title
if (title = "TRUE") {
print ("Water Temperature")
} else {
print("Air Temperature")
}
if (title = "TRUE") {
print ("Water Temperature")
}
print "Water Temperature" }
"Water Temperature" }
print("Water Temperature") }
title
if (title == "TRUE"){
print("Water Temperature")
} else {
print("Air Temperature")
}
title2 = grepl("w", logger2)
title2
if (titl2 == "TRUE"){
print("Water Temperature")
} else {
print("Air Temperature")
}
if (title2 == "TRUE"){
print("Water Temperature")
} else {
print("Air Temperature")
}
loggercrazy <- c("LJ_20180529_L1_1.csv","LJ_20180529_L2_1_w.csv" )
loggercrazy
#Import the raw csv file from the temperature loggers
tempcrazy = read.csv(loggercrazy, header = FALSE, sep =",")
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
ggplot(temp3, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle("Air Temperature")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20180531_L1_1.csv")
logger2 <- ("LJ_20180531_L2_1_w.csv")
title1 = grepl("w", logger1)
title2 = grepl("w", logger2)
if (title2 == "TRUE"){
print("Water Temperature")
} else {
print("Air Temperature")
}
#Import the raw csv file from the temperature loggers
temp1raw = read.csv(logger1, header = FALSE, sep =",")
temp2raw = read.csv(logger2, header = FALSE, sep =",")
View(temp1)
View(temp1raw)
##Removing all the useless raw output from the logger
temp1 = temp1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
class(temp1$temperature1)
class(temp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
class(temp1$temperature1)
class(temp1$time)
#doing the same thing for the second temperature logger
temp2 = temp2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
names(temp)= c("time", "logger", "temperature")
boxplot(temp3$temperature1)
ggplot(data = temp3, aes(x=temperature1))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle("Air Temperature")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
ggplot(temp3, aes(x=time, y=temperature1))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
#theme_bw or _ whatever are just preset themes to help with making the graph look a certain way
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle("Air Temperature")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
#another way to play there "theme". Basically you control the way the gram looks
#theme (panel.grid = element_blank(),
# panel.background = element_rect(fill = "white"),
# panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
View(temp3)
ggplot(data = temp3, aes(x=temperature2))+
geom_histogram(bins=20)+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle("Water Temperature")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = temp3, aes(x=temperature2))+
geom_histogram(bins=10)+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle("Water Temperature")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = temp3, aes(x=temperature2))+
geom_histogram(bins=10)+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle("Water Temperature")
ggplot(data = temp3, aes(x=temperature2))+
geom_histogram(bins=10)+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle("Water Temperature")+
theme_bw()
+
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = temp3, aes(x=temperature2))+
geom_histogram(bins=10)+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle("Water Temperature")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
cleandata = function(newloggerdata, logger, timeheading, tempheading){
newloggerdata = logger [-(1:200), -c(1,4, 5, 6)]
names(logger)= c(timeheading, tempheading)
logger$tempheading = as.numeric(as.character(logger$tempheading))
logger$timeheading = ymd_hms(logger$timeheading)
}
#Import the raw csv file from the temperature loggers
logger1raw = read.csv(logger1, header = FALSE, sep =",")
logger2raw = read.csv(logger2, header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20180531_L1_1.csv")
logger2 <- ("LJ_20180531_L2_1_w.csv")
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20180531_L1_1.csv")
logger2 <- ("LJ_20180531_L2_1_w.csv")
logger1title = "Air Temperature"
logger2title = "Air Temperature"
if (grepl("w", logger1)){  #if logger 1 title contains w
logger1title = "Water Temperature (L1)"
} else {
logger1title = "Air Temperature (L1)"
}
if (grepl("w", logger2)){
logger2title = "Water Temperature (L2)"
} else {
logger2title = "Air Temperature (L2)"
}
#Import the raw csv file from the temperature loggers
logger1raw = read.csv(logger1, header = FALSE, sep =",")
logger2raw = read.csv(logger2, header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
names(temp)= c("time", "logger", "temperature")
View(temp3)
graphdata = function (dataz, graphtitle, temperature) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
#Both on the same line
##ggplot(data = temp, aes(x=logger, y=temperature))+
##geom_boxplot(notch = FALSE)+
##theme_bw()+
##xlab ("")+
##ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)") +
theme(legend.position = "top")
graphdata = function (dataz, graphtitle, temperature) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
getwd()
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
# Chunk 1
#this displays the date this file was written
Sys.time()
# Chunk 2
require(ggplot2)
require(dplyr)
require(plyr)
require(lubridate)
require(dplyr)
require(reshape2)
require(scales)
# Chunk 4
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20180601_L1_1.csv")
logger2 <- ("LJ_20180601_L2_1_w.csv")
# Chunk 5
logger1title = "Air Temperature"
logger2title = "Air Temperature"
if (grepl("w", logger1)){  #if logger 1 title contains w
logger1title = "Water Temperature (L1)"
} else {
logger1title = "Air Temperature (L1)"
}
if (grepl("w", logger2)){
logger2title = "Water Temperature (L2)"
} else {
logger2title = "Air Temperature (L2)"
}
# Chunk 6
#Import the raw csv file from the temperature loggers
logger1raw = read.csv(logger1, header = FALSE, sep =",")
logger2raw = read.csv(logger2, header = FALSE, sep =",")
# Chunk 7
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
# Chunk 8
#Seperating the time into individual year, month, day etc. Don't really need it, but it could be usefull
#watertemp1$year = format(watertemp1$time,"%Y")
#watertemp1$month = format (watertemp1$time, "%m")
#watertemp1$day = format (watertemp1$time, "%d")
#watertemp1$hour = format (watertemp1$time, "%H")
#watertemp1$minute = format (watertemp1$time, "%M")
# Chunk 9
#This creates a new dataset called temp, with a common timeline and the two temperatures.
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
names(temp)= c("time", "logger", "temperature")
# Chunk 10
#this is a function to plot the data
graphdata = function (dataz, graphtitle, temperature) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
# Chunk 11
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
# Chunk 12
#Both on the same line
##ggplot(data = temp, aes(x=logger, y=temperature))+
##geom_boxplot(notch = FALSE)+
##theme_bw()+
##xlab ("")+
##ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)") +
theme(legend.position = "top")
#this is a function to plot the data
graphdata = function (dataz, graphtitle) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
