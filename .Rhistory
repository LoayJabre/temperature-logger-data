getwd
getwd()
dir()
type(temperature)
typeof(temperature)
typeof("temperature")
typeof ("time")
#Import the raw csv file from the temperature loggers
watertemp = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
watertemp1 = watertemp [-(1:200), -c(1,4, 5, 6)]
names(watertemp1)= c("time", "temperature")
typeof("temperature")
typeof ("time")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(as.character(watertemp1$temperature))
typeof(temperature)
typeof("temperature")
##This uses lubridate to convert the dates into a useable format.
watertemp1$time = ymd_hms(watertemp1$time)
require(ggplot2)
require(dplyr)
require(lubridate)
require(dplyr)
require(citr)
require(reshape2)
require(scales)
boxplot(watertemp1$temperature)
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line(mapping=aes(x=time, y=temperature), data = NULL)+
coord_cartesian(ylim =c(0,3) )
##This uses lubridate to convert the dates into a useable format.
watertemp1$time = ymd_hms(watertemp1$time)
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line(mapping=aes(x=time, y=temperature), data = NULL)+
coord_cartesian(ylim =c(0,3) )
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3) )
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3) )
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3) )
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3) )
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line(mapping=aes(x=time, y=temperature), data = NULL)+
coord_cartesian(ylim =c(0,3) )
boxplot(watertemp1$temperature)
boxplot(watertemp1$temperature)
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line(mapping=aes(x=time, y=temperature), data = NULL)+
coord_cartesian(ylim =c(0,3) )
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3) )
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,5) )
require(ggplot2)
require(dplyr)
require(lubridate)
require(dplyr)
require(citr)
require(reshape2)
require(scales)
require(ggplot2)
require(dplyr)
require(lubridate)
require(dplyr)
require(citr)
require(reshape2)
require(scales)
dir()
getwd()
#Import the raw csv file from the temperature loggers
watertemp = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
#Import the raw csv file from the temperature loggers
watertemp = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
names(watertemp1)= c("time", "temperature")
typeof ("time")
typeof("temperature")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(as.character(watertemp1$temperature))
typeof("temperature")
##This uses lubridate to convert the dates into a useable format.
watertemp1$time = ymd_hms(watertemp1$time)
View(watertemp1)
typeof("temperature")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(as.character(watertemp1$temperature))
typeof("temperature")
require(ggplot2)
require(dplyr)
require(lubridate)
require(dplyr)
require(citr)
require(reshape2)
require(scales)
#Import the raw csv file from the temperature loggers
watertemp = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
View(watertemp)
watertemp1 = watertemp [-(1:200), -c(1,4, 5, 6)]
names(watertemp1)= c("time", "temperature")
typeof("temperature")
typeof ("time")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(as.character(watertemp1$temperature))
typeof("temperature")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(watertemp1$temperature)
typeof("temperature")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(watertemp1$temperature)
typeof("temperature")
##This uses lubridate to convert the dates into a useable format.
watertemp1$time = ymd_hms(watertemp1$time)
##This uses lubridate to convert the dates into a useable format.
watertemp1$time = ymd_hms(watertemp1$time)
typeof("time")
typeof(watertemp1$temperature)
class(temperature)
class(watertemp1$temperature)
class(watertemp1$time)
names(watertemp1)= c("time", "temperature")
#Import the raw csv file from the temperature loggers
watertemp = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
watertemp1 = watertemp [-(1:200), -c(1,4, 5, 6)]
names(watertemp1)= c("time", "temperature")
class(watertemp1$temperature)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(watertemp1$temperature)
class(watertemp1$temperature)
class(watertemp1$time)
##This uses lubridate to convert the dates into a useable format.
watertemp1$time = ymd_hms(watertemp1$time)
class(watertemp1$time)
watertemp1$time <- format(watertemp1$time, "%H:%M:%S")
watertemp1$time <- format(watertemp1$hour, "%H")
#Import the raw csv file from the temperature loggers
watertemp = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
watertemp1 = watertemp [-(1:200), -c(1,4, 5, 6)]
names(watertemp1)= c("time", "temperature")
class(watertemp1$temperature)
class(watertemp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(as.character(watertemp1$temperature))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,5) )
class(watertemp1$temperature)
##This uses lubridate to convert the dates into a useable format.
watertemp1$time = ymd_hms(watertemp1$time)
class(watertemp1$time)
watertemp1$time <- format(watertemp1$year, "%y")
#Import the raw csv file from the temperature loggers
watertemp = read.csv("LJ_20180524_L2_1_w.csv", header = FALSE, sep =",")
##Removing all the useless raw output from the logger
watertemp1 = watertemp [-(1:200), -c(1,4, 5, 6)]
names(watertemp1)= c("time", "temperature")
class(watertemp1$temperature)
class(watertemp1$time)
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
watertemp1$temperature = as.numeric(as.character(watertemp1$temperature))
##This uses lubridate to convert the dates into a useable format.
watertemp1$time = ymd_hms(watertemp1$time)
class(watertemp1$temperature)
class(watertemp1$time)
watertemp1$year <- format(watertemp1$time, "%y")
watertemp1$year <- format(watertemp1$time, "%Y")
watertemp1$month = format (watertemp1$time, "%b")
watertemp1$month = format (watertemp1$time, "%B")
watertemp1$month = format (watertemp1$time, "%m")
watertemp1$day = format (watertemp1$day, "%d")
watertemp1$day = format (watertemp1$time, "%d")
watertemp1$hour = format (watertemp1$time, "%h")
watertemp1$hour = format (watertemp1$time, "%H")
watertemp1$minute = format (watertemp1$time, "%M")
plot (watertemp1$day, watertemp1$temperature)
plot (watertemp1$hour, watertemp1$temperature)
#Seperating the time into individual year, month, day etc.
watertemp1$year = format(watertemp1$time,"y")
watertemp1$month = format (watertemp1$time, "%m")
watertemp1$day = format (watertemp1$time, "%d")
watertemp1$hour = format (watertemp1$time, "%H")
watertemp1$minute = format (watertemp1$time, "%M")
watertemp1$year = format(watertemp1$time,"%y")
watertemp1$year = format(watertemp1$time,"%Y")
watertemp1$year = format(watertemp1$time,"%Y")
boxplot(watertemp1$temperature)
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
stat_summary(aes(y = temperature,group = CT), fun.y=mean, colour="red", geom="line")+
coord_cartesian(ylim =c(0,3))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
stat_summary(aes(y = temperature), fun.y=mean, colour="red", geom="line")+
coord_cartesian(ylim =c(0,3))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line(colour = "red")+
coord_cartesian(ylim =c(0,3))
panel.border = element_rect(colour = "black", fill = NA,size = 0.2 )
panel.border = element_rect(colour = "black", fill = NA,size = 0.2 )
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
theme = (panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2 )
watertemp-plot = ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
watertemp-plot = ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
watertemp-plot = ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
watertempplot = ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
watertempplot = ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
panel.border = element_rect(colour = "black", fill = NA,size = 0.2)
View(watertempplot)
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(0,3))+
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(1.5,3))+
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(2,3))+
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
ggplot(watertemp1, aes(x=time, y=temperature))+
#the following line x=time assigns x and y axis labels
geom_line()+
coord_cartesian(ylim =c(1.5,2.5))+
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill = NA,size = 0.2))
