graphdata (temp3$temperature2, logger2title)
# Chunk 12
#Both on the same line
##ggplot(data = temp, aes(x=logger, y=temperature))+
##geom_boxplot(notch = FALSE)+
##theme_bw()+
##xlab ("")+
##ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)") +
theme(legend.position = "top")
#this is a function to plot the data
graphdata = function (dataz, graphtitle) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
#Both on the same line
##ggplot(data = temp, aes(x=logger, y=temperature))+
##geom_boxplot(notch = FALSE)+
##theme_bw()+
##xlab ("")+
##ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
geom_line()+
coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)") +
theme(legend.position = "top")
#Both on the same line
##ggplot(data = temp, aes(x=logger, y=temperature))+
##geom_boxplot(notch = FALSE)+
##theme_bw()+
##xlab ("")+
##ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)") +
theme(legend.position = "top")
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
#Both on the same line
##ggplot(data = temp, aes(x=logger, y=temperature))+
##geom_boxplot(notch = FALSE)+
##theme_bw()+
##xlab ("")+
##ylab ("Temperature (C)")
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)") +
theme(legend.position = "top")
#this displays the date this file was written
Sys.time()
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
#This creates a new dataset called temp, with a common timeline and the two #temperatures
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
names(temp)= c("time", "logger", "temperature")
#this displays the date this file was written
Sys.time()
#this displays the date this file was written
Sys.time()
#this displays the date this file was written
Sys.time()
#this displays the date this file was written
Sys.time()
#this displays the date this file was written
Sys.time()
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
d
#this displays the date this file was written
Sys.time()
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
getwd()
dir()
getwd()
dir()
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20190313_L1_1.csv")
logger2 <- ("LJ_20190313_L2_1.csv")
#this displays the date this file was written
Sys.time()
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20190313_L1_1.csv")
logger2 <- ("LJ_20190313_L2_1.csv")
logger1title = "Air Temperature"
logger2title = "Air Temperature"
if (grepl("w", logger1)){  #if logger 1 title contains w
logger1title = "Water Temperature (L1)"
} else {
logger1title = "Air Temperature (L1)"
}
if (grepl("w", logger2)){
logger2title = "Water Temperature (L2)"
} else {
logger2title = "Air Temperature (L2)"
}
#Import the raw csv file from the temperature loggers
logger1raw = read.csv(logger1, header = FALSE, sep =",")
logger2raw = read.csv(logger2, header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two #temperatures
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
names(temp)= c("time", "logger", "temperature")
#this is a function to plot the data
graphdata = function (dataz, graphtitle) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
ggplot(temp, aes(x=time, y=temperature, colour = logger))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
theme_bw()+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0)) +
xlab ("Time")+
ylab ("Temperature (C)") +
theme(legend.position = "top")
#this is a function to plot the data
graphdata = function (dataz, graphtitle) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
#this is a function to plot the data
graphdata = function (dataz, graphtitle) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
View(temp3)
x <- mean (temp3$temperature1)
x <- summary (temp3$temperature1)
x
x <- se (temp3$temperature1)
x <- stderr (temp3$temperature1)
logger1<- summary (temp3$temperature1)
summary (temp3$temperature1)
logger2 <- summary (temp3$temperature2)
summary (temp3$temperature2)
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20190413_L1_1.csv")
logger2 <- ("LJ_20190413_L2_1.csv")
logger1title = "Air Temperature"
logger2title = "Air Temperature"
if (grepl("w", logger1)){  #if logger 1 title contains w
logger1title = "Water Temperature (L1)"
} else {
logger1title = "Air Temperature (L1)"
}
if (grepl("w", logger2)){
logger2title = "Water Temperature (L2)"
} else {
logger2title = "Air Temperature (L2)"
}
#Import the raw csv file from the temperature loggers
logger1raw = read.csv(logger1, header = FALSE, sep =",")
logger2raw = read.csv(logger2, header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#This creates a new dataset called temp, with a common timeline and the two #temperatures
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
names(temp)= c("time", "logger", "temperature")
temp3 = cbind(temp1, temperature2=temp2$temperature2)
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20190413_L1_1.csv")
logger2 <- ("LJ_20190413_L2_1.csv")
logger1title = "Air Temperature"
logger2title = "Air Temperature"
if (grepl("w", logger1)){  #if logger 1 title contains w
logger1title = "Water Temperature (L1)"
} else {
logger1title = "Air Temperature (L1)"
}
if (grepl("w", logger2)){
logger2title = "Water Temperature (L2)"
} else {
logger2title = "Air Temperature (L2)"
}
#Import the raw csv file from the temperature loggers
logger1raw = read.csv(logger1, header = FALSE, sep =",")
logger2raw = read.csv(logger2, header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
#this creates two strings for, one for each temperature logger. So, you enter file names here, and they are imported in the next chunk
logger1 <- ("LJ_20190413_L1_1.csv")
logger2 <- ("LJ_20190413_L2_1.csv")
logger1title = "Air Temperature"
logger2title = "Air Temperature"
if (grepl("w", logger1)){  #if logger 1 title contains w
logger1title = "Water Temperature (L1)"
} else {
logger1title = "Air Temperature (L1)"
}
if (grepl("w", logger2)){
logger2title = "Water Temperature (L2)"
} else {
logger2title = "Air Temperature (L2)"
}
logger1title = "Air Temperature"
logger2title = "Air Temperature"
if (grepl("w", logger1)){  #if logger 1 title contains w
logger1title = "Water Temperature (L1)"
} else {
logger1title = "Air Temperature (L1)"
}
if (grepl("w", logger2)){
logger2title = "Water Temperature (L2)"
} else {
logger2title = "Air Temperature (L2)"
}
#Import the raw csv file from the temperature loggers
logger1raw = read.csv(logger1, header = FALSE, sep =",")
logger2raw = read.csv(logger2, header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#Import the raw csv file from the temperature loggers
logger1raw = read.csv(logger1, header = FALSE, sep =",")
logger2raw = read.csv(logger2, header = FALSE, sep =",")
##Removing all the useless raw output from the logger
temp1 = logger1raw [-(1:200), -c(1,4, 5, 6)]
names(temp1)= c("time", "temperature1")
##The logger exports the temperature as a factor. So, we need to convert it to a number. is a little more than just a as.numeric because the code was showing the wrong value at first.
temp1$temperature1 = as.numeric(as.character(temp1$temperature1))
##This uses lubridate to convert the dates into a useable format.
temp1$time = ymd_hms(temp1$time)
#doing the same thing for the second temperature logger
temp2 = logger2raw [-(1:200), -c(1,4, 5, 6)]
names(temp2)= c("time2", "temperature2")
temp2$temperature2 = as.numeric(as.character(temp2$temperature2))
temp2$time2 = ymd_hms(temp2$time2)
#Seperating the time into individual year, month, day etc. Don't really need it, but it could be usefull
#watertemp1$year = format(watertemp1$time,"%Y")
#watertemp1$month = format (watertemp1$time, "%m")
#watertemp1$day = format (watertemp1$time, "%d")
#watertemp1$hour = format (watertemp1$time, "%H")
#watertemp1$minute = format (watertemp1$time, "%M")
#This creates a new dataset called temp, with a common timeline and the two #temperatures
temp3 = cbind(temp1, temperature2=temp2$temperature2)
temp = melt(data = temp3, id.vars = "time", measure.vars = c("temperature1", "temperature2"))
names(temp)= c("time", "logger", "temperature")
#this is a function to plot the data
graphdata = function (dataz, graphtitle) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
#this is a function to plot the data
graphdata = function (dataz, graphtitle) {
boxplot(dataz, main = graphtitle)
#histogram
print (ggplot(temp3, aes(x=dataz))+
geom_histogram(bins=30)+
theme_bw()+
xlab ("Temperature (C)")+
ylab ("Frequency")+
coord_cartesian(xlim=c(0,3))+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5)))
#time series
ggplot(temp3, aes(x=time, y=dataz))+
geom_line()+
#coord_cartesian(ylim =c(0,3)) +
scale_x_datetime(date_breaks = "2 hour",  labels = date_format("%m/%d - %H:%M")) +
xlab ("Time")+
ylab ("Temperature (C)")+
ggtitle(graphtitle)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = 25, vjust = 1.0, hjust = 1.0))
}
graphdata (temp3$temperature1, logger1title)
graphdata (temp3$temperature2, logger2title)
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(reshape2)
require(scales)
require(ggplot2)
require(plyr)
require(dplyr)
require(lubridate)
require(installR)
require(installr)
require(ggplot)
install.packages(installr)
install.packages("installr")
require(installr)
copy.packages.between.libraries(ask=T)
